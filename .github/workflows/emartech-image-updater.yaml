name: emartech-image-updater

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  BUILDKIT_PROGRESS: 'plain'
  DOCKER_CLI_EXPERIMENTAL: enabled
  NPM_PACKAGE: '@emartech/client-publish'
  TARGET_IMAGE: 'zerosuxx/emartech-client-publish'
  DOCKERHUB_USERNAME: 'zerosuxx'

jobs:
  check-docker-image-exists:
    runs-on: ubuntu-latest
    outputs:
      packageVersion: ${{ steps.check.outputs.packageVersion }}
    steps:
      - name: Check docker image exists for latest npm package version
        id: check
        run: |
          export packageVersion=$(npm view $NPM_PACKAGE version)
          echo $packageVersion
          dockerManifestResult=$(docker manifest inspect $TARGET_IMAGE:$packageVersion || true)
          if [ "$dockerManifestResult" == "" ];
          then
            echo "::set-output name=packageVersion::$packageVersion"
          fi

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: check-docker-image-exists
    if: needs.check-docker-image-exists.outputs.packageVersion != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and deploy docker image
        run: |
          docker buildx build \
            --push \
            --platform linux/amd64 \
            --target emartech \
            -t $TARGET_IMAGE:latest \
            -t $TARGET_IMAGE:${{ needs.check-docker-image-exists.outputs.packageVersion }} \
            .
